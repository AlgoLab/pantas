import sys
import random
import os
from os.path import join as pjoin
from os.path import isfile
import gzip

# FIXME: everything is hardcoded to 1 replicate and 2 conditions

seed = 23
iterations = 1

random.seed(seed)

FA = config["fa"]
GTF = config["gtf"]
VCF = config["vcf"]
ODIR = config["odir"]
L = 150  # config["l"]
N = config["n"]

ENVS = pjoin(os.getcwd(), "..", "envs")

if not isfile(FA + ".fai"):
    print("\n\nInput reference not indexed, please index with samtools faidx\n\n")
    sys.exit(1)

chroms = []
for line in open(FA + ".fai"):
    chroms.append(line.split("\t")[0])

samples = []
with gzip.open(VCF, "rt") as fin:
    for line in fin:
        if line.startswith("#C"):
            samples = random.sample(line.split("\t")[9:], iterations)
            break
assert samples != []


##### include rules #####
include: "rules/simulation.smk"
include: "rules/pantas.smk"
include: "rules/star.smk"
include: "rules/rmats.smk"
include: "rules/salmon.smk"
include: "rules/suppa.smk"
include: "rules/whippet-anno.smk"
include: "rules/whippet-novel.smk"


rule run:
    input:
        ## to get truth file
        #expand(pjoin(ODIR, "{sample}", "truth.csv"), sample=samples),
        # pantas
        #expand(
        #    pjoin(ODIR, "{sample}", "anno", "pantas2", "quant-remap.w{w}.csv"),
        #    w=[3, 5],
        #    sample=samples,
        #),
        #expand(
        #    pjoin(ODIR, "{sample}", "novel", "pantas2", "quant-remap.w{w}.csv"),
        #    w=[3, 5],
        #    sample=samples,
        #),
        ## rmats
        #expand(pjoin(ODIR, "{sample}", "rMATS-anno.csv"), sample=samples),
        #expand(pjoin(ODIR, "{sample}", "rMATS-novel.csv"), sample=samples),
        ## suppa2
        #expand(pjoin(ODIR, "{sample}", "SUPPA2-anno.csv"), sample=samples),
        ## whippet
        #expand(pjoin(ODIR, "{sample}", "anno", "whippet", "psi.diff"), sample=samples),
        # compare
        expand(
            pjoin(ODIR, "{sample}", "compare-anno.w{w}.csv"), sample=samples, w=[3, 5]
        ),
        expand(
            pjoin(ODIR, "{sample}", "compare-novel.w{w}.csv"), sample=samples, w=[3, 5]
        ),


rule compare_all_anno:
    input:
        truth=pjoin(ODIR, "{sample}", "truth.csv"),
        pantas=pjoin(ODIR, "{sample}", "anno", "pantas2", "quant-remap.w{w}.csv"),
        rmats=pjoin(ODIR, "{sample}", "rMATS-anno.csv"),
        whippet=pjoin(ODIR, "{sample}", "anno", "whippet", "psi.diff"),
        suppa2=pjoin(ODIR, "{sample}", "SUPPA2-anno.csv"),
    output:
        pjoin(ODIR, "{sample}", "compare-anno.w{w}.csv"),
    shell:
        """
        for c in 1 3 5 10 20 ; do python3 ./scripts/cmp_pantas.py -t {input.truth} -p {input.pantas} -r {input.rmats} -w {input.whippet} -s {input.suppa2} -d 0.05 -c $c ; done > {output}
        """


rule compare_all_novel:
    input:
        truth=pjoin(ODIR, "{sample}", "truth.csv"),
        pantas=pjoin(ODIR, "{sample}", "novel", "pantas2", "quant-remap.w{w}.csv"),
        rmats=pjoin(ODIR, "{sample}", "rMATS-novel.csv"),
    output:
        pjoin(ODIR, "{sample}", "compare-novel.w{w}.csv"),
    shell:
        """
        for c in 1 3 5 10 20 ; do python3 ./scripts/cmp_pantas.py -t {input.truth} -p {input.pantas} -r {input.rmats} --novel -d 0.05 -c $c ; done > {output}
        """
