#!/bin/bash

SCRIPT_NAME="pantas"
VERSION="1.0.0"

REPO_ROOT="$(dirname $0)"

USAGE=$''"${SCRIPT_NAME}"' [build|augment|call|quant|remap|version] -h'

BUILD_USAGE=$''"${SCRIPT_NAME}"' build <FA> <GTF> <VCF>

Arguments:
    -o <FPATH>       Output directory (default: .)
	-a               Perform aggressive pruning,
	                 do not restore haplotype transcripts (default: False)
    -t <INT>         Number of threads (default: 8)
    -h               Print this help and exit
'

AUG_USAGE=$''"${SCRIPT_NAME}"' augment <GAF> <GFA>

Arguments:
    -h               Print this help and exit
'

CALL_USAGE=$''"${SCRIPT_NAME}"' call <GFA> <GTF>

Arguments:
    -w <INT>         Minimum read count for supporting junction (default: 1)
    -i <INT>         Intronic search window for novel events,
                     larger values reduce FP but increase time (default: 5)
    -n               Call novel events (default: False)
    -a               Do not call known annotated events (default: False)
    -h               Print this help and exit
'

QUANT_USAGE=$'Usage: '"${SCRIPT_NAME}"' quant <C1.R1> <C1.R2> <C1.Rx> <C2.R1> <C2.R2> <C2.Rx>

Arguments:
    -w <INT>         Minimum read count for all junctions (default: 1)
    -a               Report all events (not only those correctly quantified in both conditions)
    -h               Print this help and exit
'

REMAP_USAGE=$''"${SCRIPT_NAME}"' remap <GFA> <GTF>

Arguments:
    -i <INT>         Minimum intron size (default: 25)
    -h               Print this help and exit
'

MODE=$1
shift # to "remove" subcommand for getopts

if [ "$MODE" == "version" ]; then
	echo "$SCRIPT_NAME, $VERSION"
elif [ "$MODE" == "build" ]; then
	WD="."
	nt=8
	hp=0
	while getopts "o:t:ah" flag; do
		case "${flag}" in
		h)
			$(echo >&2 "${BUILD_USAGE}")
			exit 0
			;;
		o)
			WD=${OPTARG}
			;;
		a)
		    hp=1
			;;
		t)
			nt=${OPTARG}
			;;
		esac
	done
	if [[ $# -lt $((${OPTIND} + 2)) ]]; then
		(echo >&2 "ERROR: Wrong number of arguments.")
		(echo >&2 "")
		(echo >&2 "${BUILD_USAGE}")
		exit 1
	fi

	FA=${@:$OPTIND:1}
	GTF=${@:$OPTIND+1:1}
	VCF=${@:$OPTIND+2:1}

	if [ "${WD:0:1}" != "/" ]
	then
		WD=$(pwd)/$WD
	fi
	pushd $REPO_ROOT/build &> /dev/null
	echo $hp
	snakemake -c$nt --config fa=$FA gtf=$GTF vcf=$VCF wd=$WD hp=$hp -s build.smk
	popd &> /dev/null
elif [ "$MODE" == "augment" ]; then
	while getopts "h" flag; do
		case "${flag}" in
		h)
			$(echo >&2 "${AUG_USAGE}")
			exit 0
			;;
		esac
	done
	if [[ $# -lt $((${OPTIND} + 1)) ]]; then
		(echo >&2 "ERROR: Wrong number of arguments.")
		(echo >&2 "")
		(echo >&2 "${AUG_USAGE}")
		exit 1
	fi

	GAF=${@:$OPTIND:1}
	GFA=${@:$OPTIND+1:1}
	python3 $REPO_ROOT/scripts/alignments_augmentation_from_gaf.py $GAF $GFA
elif [ "$MODE" == "call" ]; then
	rca=""
	rc=""
	noanno=""
	novel=""
	isw=5
	while getopts "w:anh" flag; do
		case "${flag}" in
		h)
			$(echo >&2 "${CALL_USAGE}")
			exit 0
			;;
		w)
			rc="--rca ${OPTARG}"
			;;
		i)
			isw=${OPTARG}
			;;
		a)
			noanno="--no-annotated"
			;;
		n)
			novel="--novel"
			;;
		esac
	done
	if [[ $# -lt $((${OPTIND} + 1)) ]]; then
		(echo >&2 "ERROR: Wrong number of arguments.")
		(echo >&2 "")
		(echo >&2 "${CALL_USAGE}")
		exit 1
	fi

	GFA=${@:$OPTIND:1}
	GTF=${@:$OPTIND+1:1}
	python3 $REPO_ROOT/scripts/call.py --isw $isw $rc $noanno $novel $GFA $GTF
elif [ "$MODE" == "quant" ]; then
	both="--both"
	w=0
	while getopts "w:ah" flag; do
		case "${flag}" in
		w)
			w=${OPTARG}
			;;
		a)
			both=""
			;;
		h)
			$(echo >&2 "${QUANT_USAGE}")
			exit 0
			;;
		esac
	done
	if [[ $# -lt $((${OPTIND} + 1)) ]]; then
		(echo >&2 "ERROR: Wrong number of arguments.")
		(echo >&2 "")
		(echo >&2 "${QUANT_USAGE}")
		exit 1
	fi
	nfp=$(($# - ${OPTIND} + 1))
	if [[ $((nfp % 2)) -eq 1 ]]; then
		(echo >&2 "ERROR: Wrong number of replicates.")
		(echo >&2 "")
		(echo >&2 "${QUANT_USAGE}")
		exit 1
	fi
	nr=$((nfp / 2))

	C1=${@:$OPTIND:$nr}
	C2=${@:$OPTIND+$nr:$nr}
	python3 $REPO_ROOT/scripts/quantify.py -w $w $both --c1 $C1 --c2 $C2
elif [ "$MODE" == "remap" ]; then
	min_intron_size=25
	while getopts "i:h" flag; do
		case "${flag}" in
		i)
			min_intron_size=${OPTARG}
			;;
		h)
			$(echo >&2 "${REMAP_USAGE}")
			exit 0
			;;
		esac
	done
	if [[ $# -lt $((${OPTIND} + 1)) ]]; then
		(echo >&2 "ERROR: Wrong number of arguments.")
		(echo >&2 "")
		(echo >&2 "${REMAP_USAGE}")
		exit 1
	fi
	CSV=${@:$OPTIND:1}
	GTF=${@:$OPTIND+1:1}
	python3 $REPO_ROOT/scripts/remap.py -i $min_intron_size $CSV $GTF
else
	echo $USAGE
	exit 1
fi

exit 0
